% script for following Uva's tremor power over time, for the three days


% "script_kiwiTremor_PSDs.m"


% Collected on microstrain G-link hardware
clear; close all

% G-link sampling freq when streaming 3 channels (hardware design)
fs = 617; % samples/second

dataAcqPn = 'D:\PROJECTS\Thalamic DBS for Harmaline Tremors\Data Acquisition\TDTdata\';
% directoryPn = 'Mela\Harmaline\';
projRootPath = 'L:\My Drive\PROJECTS\Thalamic DBS for Harmaline Tremors\';
SavePn = 'Data Processing\Mela_tremors\';


% CONSTANTS

% decide whether to show all figures generated by workflow
cfg.displayWorkflowFigs = true;

% (the the rest of the constants See inside "tremorWorkflow" function at bottom of script)

cfg.fcDetrend = 1; % Hz

% Spectrogram parameters:
cfg.TWIN = 1; % seconds, sliding time-window of spectrogram
cfg.NOVERLAP = 0; % samples, no overlaps for these spectrogam windows

% Movement artifact removal
cfg.MADthresh = 2; % median limit for outliers

% Tremor frequency band
trPeak = 10; % Hz, major tremor component
trRange = 3; % limits of tremor band around major component
cfg.tremorBand = [(trPeak - trRange), (trPeak + trRange)]; % Hz

% Tremor frequency band
% trPeak = 15; % Hz, major tremor component
% trRange = 3; % limits of tremor band around major component
cfg.lowBand = [7 13]; % Hz
cfg.highBand = [18 22];


% General movement frequency band
cfg.generalBand = [1, 35];






%% Load metadata for all files

% Read in metadata table for Mela's recordings
tablePath = 'Data Acquisition\Uva Pilot\';
metaTab = readtable([projRootPath tablePath 'acquisitionMetadata_Uva.csv']);
harTab = readtable([projRootPath tablePath 'harmalineSessionData.csv']);
fullMeta = join(metaTab, harTab);

% add in data for time since harmaline injection
harRefTime = fullMeta.startTime - fullMeta.harInjTime;
fullMeta = [fullMeta, table(harRefTime)];

% Keep only rows (recordings) marked as "ok" in recComment
fullMeta = fullMeta(strcmp(fullMeta.recComment, 'ok'),:);


%% Perform processing from Session 1 only
% Loop thru all individual files adding values to table

Sess1 = fullMeta(fullMeta.session == 1,:);
nRows = height(Sess1);

tic
for iRow = 1:nRows
    
    sessTabRow = Sess1(iRow,:);
    [fPeakTr(iRow,1), aTremorPow(iRow,1), ...
        aPowRatio(iRow,1)] = tremorWorkflow(sessTabRow, ...
        dataAcqPn, cfg);
   
end
toc

Sess1 = [Sess1, table(fPeakTr), table(aTremorPow), table(aPowRatio)];

close all
clear fPeakTr aTremorPow aPowRatio accTrMagSum



%% Perform processing from Session 2 only
% Loop thru all individual files adding values to table

Sess2 = fullMeta(fullMeta.session == 2,:);
nRows = height(Sess2);

tic
for iRow = 1:nRows
    
     sessTabRow = Sess2(iRow,:);
    [fPeakTr(iRow,1), aTremorPow(iRow,1), ...
        aPowRatio(iRow,1)] = tremorWorkflow(sessTabRow, ...
        dataAcqPn, cfg);
        
end
toc

Sess2 = [Sess2, table(fPeakTr), table(aTremorPow), table(aPowRatio)];

close all
clear fPeakTr aTremorPow aPowRatio accTrMagSum



%% Perform processing from Session 3 only
% Loop thru all individual files adding values to table

Sess3 = fullMeta(fullMeta.session == 3,:);
nRows = height(Sess3);

tic
for iRow = 1:nRows
    
     sessTabRow = Sess3(iRow,:);
    [fPeakTr(iRow,1), aTremorPow(iRow,1), ...
        aPowRatio(iRow,1)] = tremorWorkflow(sessTabRow, ...
        dataAcqPn, cfg);
       
end
toc

Sess3 = [Sess3, table(fPeakTr), table(aTremorPow), table(aPowRatio)];

close all
clear fPeakTr aTremorPow aPowRatio accTrMagSum


%% Obtain specific pairs of accelerometry PSDs that exemplify the trend for each day

% For Session 1
sessTabs{1} = Sess1;
sessTabs{2} = Sess2;
sessTabs{3} = Sess3;

dispRec = [1, 10; 1, 8; 1, 7];

for iSess = 1:3
    
    % specify current table
    SessN = sessTabs{iSess};
    
    % fill in frequency and PSD details
    tdt = TDTbin2mat([dataAcqPn, SessN.TDTtank{dispRec(iSess,1)}, ...
        '\', SessN.TDTblock{dispRec(iSess,1)}], ...
        'STORE', 'Acc3');
    fs = tdt.streams.Acc3.fs; % hz
    acc = double(tdt.streams.Acc3.data');
%     fn = SessN.filename{dispRec(iSess,1)};
%     fs = SessN.samplingFrequency(1);
%     dataTab = readtable([dataAcqPn directoryPn fn]);
%     acc = [dataTab.Channel1, dataTab.Channel2, dataTab.Channel3];
    [frec{iSess,1},PSDrec{iSess,1}] = getCleanPSD(acc, fs, cfg);
    
    
    tdt = TDTbin2mat([dataAcqPn, SessN.TDTtank{dispRec(iSess,2)}, ...
        '\', SessN.TDTblock{dispRec(iSess,2)}], ...
        'STORE', 'Acc3');
    fs = tdt.streams.Acc3.fs; % hz
    acc = double(tdt.streams.Acc3.data');
%     fn = SessN.filename{dispRec(iSess,2)};
%     fs = SessN.samplingFrequency(end);
%     dataTab = readtable([dataAcqPn directoryPn fn]);
%     acc = [dataTab.Channel1, dataTab.Channel2, dataTab.Channel3];
    [frec{iSess,2},PSDrec{iSess,2}] = getCleanPSD(acc, fs, cfg);

    
end



%% Display Peak frequency over time


figure('Position', [1958 167 1811 805]);



% Session 1: 2 mg/kg
tSinceHar = minutes(Sess1.harRefTime(:)); % minutes
sess = 1;

ax(1) = subplot(3,3,1); plot(frec{sess,1}, PSDrec{sess,1}, frec{sess,2}, PSDrec{sess,2}); 
xlabel('Frequency (Hz)'); ylabel('acc PSD'); legend('baseline', 'harmaline example')
title('First and last recording '); grid on; hold on;

ax(2) = subplot(3,3,2); stem(tSinceHar, Sess1.aTremorPow);
xlabel('Time since injection (mins)'); ylabel('Power, A.U.'); 
title('Tremor band power'); grid on; hold on;

ax(3) = subplot(3,3,3); stem(tSinceHar, 100*(Sess1.aPowRatio));
xlabel('Time since injection (mins)'); ylabel('Tremor/Mov %'); 
title('% acc Power'); grid on; hold on;


% Session 2: 6 mg/kg
tSinceHar = minutes(Sess2.harRefTime(:)); % minutes
sess = 2;

ax(4) = subplot(3,3,4); plot(frec{sess,1}, PSDrec{sess,1}, frec{sess,2}, PSDrec{sess,2}); 
xlabel('Frequency (Hz)'); ylabel('acc PSD'); legend('baseline', 'harmaline example')
title('First and last recording '); grid on; hold on;

ax(5) = subplot(3,3,5); stem(tSinceHar, Sess2.aTremorPow);
xlabel('Time since injection (mins)'); ylabel('Power, A.U.'); 
title('Tremor band power'); grid on; hold on;

ax(6) = subplot(3,3,6); stem(tSinceHar, 100*(Sess2.aPowRatio));
xlabel('Time since injection (mins)'); ylabel('Tremor/Mov %'); 
title('% acc Power'); grid on; hold on;


% Session 3: 12 mg/kg
tSinceHar = minutes(Sess3.harRefTime(:)); % minutes
sess = 3;

ax(7) = subplot(3,3,7); plot(frec{sess,1}, PSDrec{sess,1}, frec{sess,2}, PSDrec{sess,2}); 
xlabel('Frequency (Hz)'); ylabel('acc PSD'); legend('baseline', 'harmaline example')
title('First and last recording '); grid on; hold on;

ax(8) = subplot(3,3,8); stem(tSinceHar, Sess3.aTremorPow);
xlabel('Time since injection (mins)'); ylabel('Power, A.U.'); 
title('Tremor band power'); grid on; hold on;

ax(9) = subplot(3,3,9); stem(tSinceHar, 100*(Sess3.aPowRatio));
xlabel('Time since injection (mins)'); ylabel('Tremor/Mov %'); 
title('% acc Power'); grid on; hold on;


timeAxes = [2 3 5 6 8 9];
psdAxes = [1 4 7];
powerAxes = [2 5 8];
ratioAxes = [3 6 9];


% Adjust some group scaling
set(ax(powerAxes), 'YLim', [0 0.035]);
set(ax(ratioAxes), 'YLim', [0 50]);

% Adjust time window shown
set(ax(timeAxes), 'XLim', [-30 250]);

% Adjust frequency lims
% set(ax(psdAxes), 'XLim', [0 35]);
set(ax(psdAxes), 'XLim', [0 35], 'YLim', [0 6e-3]);


% % last min touches
% ax(1).YLim = [0 12e5];
% ax(7).YLim = [0 12e5];


% Add a red line showing time of harmaline inject to all plots
for i = timeAxes
    plot(ax(i), [0, 0], [ax(i).YLim], 'r');
    
end


%% SUB-FUNCTIONS

function [fPeakTr,aTremorPow,aPowRatio] = tremorWorkflow(sessTabRow, dataAcqPn, cfg)
% Based on approach used in "script_displayMelaTremorInTime.m", but adapted
% for Uva's stuff

% Load in data and get into format of "acc" and "fs"
% fn = sessTabRow.filename{1};
% dataTab = readtable([dataAcqPn directoryPn fn]);

tdt = TDTbin2mat([ dataAcqPn sessTabRow.TDTtank{1} '\' sessTabRow.TDTblock{1}], ...
    'STORE', 'Acc3');

fs = tdt.streams.Acc3.fs; % hz
acc = double(tdt.streams.Acc3.data');
% t = 1/fs * (0:(height(dataTab) - 1))';
disp(sessTabRow.TDTblock{1})




% Custom Sub-function:
[f,PSD] = getCleanPSD(acc, fs, cfg);


% TRACK peak frequency results for table
fPeakTr = f(PSD == max(PSD));

% TRACK sum of tremor power
isLoBand = (f >= cfg.lowBand(1)) & (f < cfg.lowBand(2));
isHiBand = (f >= cfg.highBand(1)) & (f < cfg.highBand(2));
isTremor = isLoBand | isHiBand;
aTremorPow = sum(PSD(isTremor));

% isTremor = (f >= cfg.tremorBand(1)) & (f < cfg.tremorBand(2));
aTremorPow = sum(PSD(isTremor));



% Get Ratio of tremor power vs general movmement power
% Use a log-tranformed PSD power

% TRACK sum of tremor power
isGenMov = (f >= cfg.generalBand(1)) & (f < cfg.generalBand(2));
aGenPow = sum(PSD(isGenMov));

% Mean Power for total time
aPowRatio = aTremorPow / aGenPow;


end

function [f,PSD] = getCleanPSD(acc, fs, cfg)
% runs the whole workflow to obtain spectrogram and tremor power outputs
% input is a single row of the table that is being referenced
% 
% INPUTS
% acc - triaxial accelerometer data, column oriented
%  fs - sampling freq of said accelerometer data
% cfg.
%     fcDetrend - highpass filter cutoff for detrending acc data (Hz)
%     TWIN - window to be used for spectrogram
%     NOVERLAP - samples of overlap for spectrogram windows
%     displayWorkflowFigs - TF value for whether or not to show figures of
%                           intermediate steps

   

%%


% % Load in data and get into format of "acc" and "fs"
% fn = sessTabRow.filename{1};
% dataTab = readtable([dataAcqPn directoryPn fn]);
% t = 1/fs * (0:(height(dataTab) - 1))';
% acc = [dataTab.Channel1, dataTab.Channel2, dataTab.Channel3];

% Detrend data, linear best fit is subtracted from each channel
acc = detrend(acc);


% Highpass filter out slow components

[b,a] = butter(3, cfg.fcDetrend/(fs/2), 'high');
accFilt = filtfilt(b, a, acc);



%% Get combined triaxial spectrogram

window = floor(cfg.TWIN * fs);

% Sum PSDs from all 3 accel channels
clear Z S
for ch = 1:3
    [Z(:,:,ch), f, tSpec] = spectrogram(accFilt(:,ch), window, cfg.NOVERLAP, [], fs, 'yaxis');
    % tRef = linspace(tSpec(1), tSpec(end), numel(tSpec));
    S(:,:,ch) = abs(Z(:,:,ch));
    S(:,:,ch) = S(:,:,ch).^2;

end
% Combine spectral power from all three axes (summate)
Sacc = sum(S, 3);

% Get average power (S) PSD over time
% PSDWashNorm = Swash ./ (repmat(PSDbaseAv, 1, size(Swash, 2)));
if cfg.displayWorkflowFigs
    f2 = figure; 
    ax = axes;
    ax.Parent = f2;
    surf(tSpec, f, 10*log10(Sacc), ...
        'Parent', ax, ...
        'EdgeColor', 'none');
    hold(ax, 'on');
    % xlabel('Time (min)');
    grid on
    axis(ax, 'tight')
    view(0,90)
    colorbar
    % ax.CLim = [-9, 9];
    % ax.YLim = [0, 20];
    % title([titStr, ', Washin, dBgain (Washin/Naive)'])

end



%% Identify movement artifact windows in spectrogram

[~, isMovArt] = util.remoutliers(sum(Sacc, 1), ...
    'bound', 'upper', ...
    'MADthresh', cfg.MADthresh);
temp = Sacc;
temp(:,isMovArt) = [];
SaccMarkOutliers = Sacc;
SaccMarkOutliers(:,isMovArt) = 100;


% Show Spectrogram with detected movement artifacts marked as 100's values
if cfg.displayWorkflowFigs
    f4 = figure;
    ax4 = axes;
    ax4.Parent = f4;
    surf(tSpec, f, 10*log10(SaccMarkOutliers), ...
        'Parent', ax4, ...
        'EdgeColor', 'none');
    hold(ax4, 'on');
    xlabel('Time (min)');
    grid on
    axis(ax4, 'tight')
    view(0,90)
    colorbar
    % ax4.YLim = [0, 300];
    % ax4.CLim = [-80, -30];
    title('Mov Artifacts marked');
    ylabel('Frequency (Hz)');
    f4.Position = [2555 57 560 421];

end

% Show Spectrogram with movement artifacts removed totally
if cfg.displayWorkflowFigs
    f4 = figure;
    ax4 = axes;
    ax4.Parent = f4;
%     tset = t;
%     tset(isMovArt) = [];
    surf(1:size(temp, 2), f, 10*log10(temp), ...
        'Parent', ax4, ...
        'EdgeColor', 'none');
    hold(ax4, 'on');
    xlabel('samples');
    grid on
    axis(ax4, 'tight')
    view(0,90)
    colorbar
    ax4.YLim = [0, 150];
    % ax4.CLim = [-80, -30];
    title('Mov Artifacts removed')
    ylabel('Frequency (Hz)');
    f4.Position = [2554 566 560 420];

end


% Get average PSD free of movement artifact windows
Sclean = temp; % movement artifact windows removed
PSD = mean(Sclean, 2);
if cfg.displayWorkflowFigs
    f1 = figure; ax = axes;
    plot(f, (PSD));
    grid on; 
    ax.XLim = [0, 35];
    %     ax.YLim = [0, popMaxPSD];
    xlabel('Frequency (Hz)');
%     title(['Minutes since harmaline inject: ' num2str(minutes(sessTabRow.harRefTime(1)))], 'Interpreter', 'none')

end
    
end


